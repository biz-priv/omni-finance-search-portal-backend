service: omni-finance-search-portal-backend # Change this to your service name

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  runtime: nodejs20.x
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - ec2:AssignPrivateIpAddresses
        - ec2:UnassignPrivateIpAddresses
      Resource: '*'
  environment:
    STAGE: ${self:provider.stage}
    ERROR_SNS_TOPIC_ARN: ${ssm:/omni-reports/${self:provider.stage}/error-notification/sns/arn}

  deploymentBucket:
    name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
    serverSideEncryption: AES256

package:
  individually: true

plugins:
  - serverless-offline

functions:
  omni-finance-search: ${file(config/functions/financesearch.yml):function}

layers:
  NodeModules:
    path: lambdaLayer/lib
    name: ${self:service}-layer-${self:provider.stage}
    description: Lambda layer for all node modules - ${self:provider.stage}
    compatibleRuntimes:
      - nodejs20.x
    retain: false

resources:
  Resources:
    ServerlessStorageSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId: vpc-ed4b2288
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    ServerlessCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: 'Cache Subnet Group'
        SubnetIds: 
          - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
    ServerlessElasticacheCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t2.micro
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - 'Fn::GetAtt': ServerlessStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ServerlessCacheSubnetGroup
